#include <bits/stdc++.h>
using namespace std;


double get_optimal_value(int capacity, vector<int> weights, vector<int> values) {
  double value = 0.0;

  int wv[weights.size()][2];
  for(int i = 0;i < weights.size();i++)
  {
	  wv[i][0] = values[i];
	  wv[i][1] = weights[i];
  }
    //sorting based on (value / weight) values
	//sorting on condition
  qsort(wv,weights.size(),sizeof(*wv),
		[](const void *a,const void *b)->int{
			int const *x = static_cast<int const*>(a);
			int const *y = static_cast<int const*>(b);
			
			double r1 = (double)x[0] / x[1]; 
			double r2 = (double)y[0] / y[1]; 
			
			return r1 < r2;
		});
		
  // write your code here
  
  for (int i = 0; i < weights.size(); i++) 
  {
        if (capacity == 0) return value;
        
        int a = min(capacity, wv[i][1]);
        value += a * (double)wv[i][0]/wv[i][1];
        
        capacity -= a;
  }
  
  
  return value;
}

int main() {
  int n;
  int capacity;
  cin >> n >> capacity;
  vector<int> values(n);
  vector<int> weights(n);
  for (int i = 0; i < n; i++) {
    cin >> values[i] >> weights[i];
  }

  double optimal_value = get_optimal_value(capacity, weights, values);

  cout.precision(10);
  printf("%.4f",optimal_value);
  cout << endl;
  return 0;
}
